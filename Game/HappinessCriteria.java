/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Game;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.JSpinner;
/**
 *
 * @author nathan
 */
public class HappinessCriteria extends javax.swing.JFrame {

    /**
     * Creates new form HappinessCriteria
     */
    public HappinessCriteria() {
        
        initComponents();
    }
    /*
     * This is a added constructor to take in the info from the CreatePlayerGUI class
     */
    public HappinessCriteria(String pInfo)
    {
        initComponents();
        info = pInfo;
    }        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Create = new javax.swing.JButton();
        Title = new javax.swing.JLabel();
        wSlider = new javax.swing.JSlider();
        lSlider = new javax.swing.JSlider();
        pSlider = new javax.swing.JSlider();
        Total = new javax.swing.JTextField();
        wSpinner = new javax.swing.JSpinner();
        lSpinner = new javax.swing.JSpinner();
        pSpinner = new javax.swing.JSpinner();
        WealthPic = new javax.swing.JLabel();
        SolitudePic = new javax.swing.JLabel();
        PowerPic = new javax.swing.JLabel();
        BackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Create.setText("Create");
        Create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateActionPerformed(evt);
            }
        });
        getContentPane().add(Create, new org.netbeans.lib.awtextra.AbsoluteConstraints(642, 522, -1, -1));

        Title.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        Title.setForeground(new java.awt.Color(255, 255, 255));
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("Define Happiness");
        getContentPane().add(Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 656, -1));

        wSlider.setBackground(new java.awt.Color(255, 255, 51));
        wSlider.setForeground(new java.awt.Color(255, 255, 255));
        wSlider.setMajorTickSpacing(10);
        wSlider.setPaintLabels(true);
        wSlider.setPaintTicks(true);
        wSlider.setValue(0);
        wSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Wealth", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Abadi MT Condensed Extra Bold", 0, 18), new java.awt.Color(255, 255, 255))); // NOI18N
        wSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        wSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                wSliderStateChanged(evt);
            }
        });
        getContentPane().add(wSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 605, 130));

        lSlider.setBackground(new java.awt.Color(0, 51, 255));
        lSlider.setForeground(new java.awt.Color(255, 255, 255));
        lSlider.setMajorTickSpacing(10);
        lSlider.setPaintLabels(true);
        lSlider.setPaintTicks(true);
        lSlider.setValue(0);
        lSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Solitude", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Abadi MT Condensed Extra Bold", 0, 18), new java.awt.Color(255, 255, 255))); // NOI18N
        lSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lSliderStateChanged(evt);
            }
        });
        getContentPane().add(lSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 605, 130));

        pSlider.setBackground(new java.awt.Color(255, 0, 0));
        pSlider.setForeground(new java.awt.Color(255, 255, 255));
        pSlider.setMajorTickSpacing(10);
        pSlider.setPaintLabels(true);
        pSlider.setPaintTicks(true);
        pSlider.setValue(0);
        pSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Power", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Abadi MT Condensed Extra Bold", 0, 18), new java.awt.Color(255, 255, 255))); // NOI18N
        pSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pSliderStateChanged(evt);
            }
        });
        getContentPane().add(pSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 386, 605, 130));

        Total.setEditable(false);
        Total.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Total.setText("100");
        Total.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)), "Points Left", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        getContentPane().add(Total, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 522, 99, -1));

        wSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        wSpinner.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 255, 51), null), "Wealth", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 255, 255)));
        wSpinner.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        wSpinner.setName("Wealth"); // NOI18N
        wSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                wSpinnerStateChanged(evt);
            }
        });
        getContentPane().add(wSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(642, 124, -1, -1));

        lSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        lSpinner.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 255), null), "Solitude", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 255, 255)));
        lSpinner.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lSpinner.setName("Solitude"); // NOI18N
        lSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lSpinnerStateChanged(evt);
            }
        });
        getContentPane().add(lSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(642, 271, -1, -1));

        pSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        pSpinner.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 0, 0), null), "Power", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 255, 255)));
        pSpinner.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pSpinner.setName("Power"); // NOI18N
        pSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pSpinnerStateChanged(evt);
            }
        });
        getContentPane().add(pSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(642, 419, -1, -1));

        WealthPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Game/resources/wealth.jpg"))); // NOI18N
        getContentPane().add(WealthPic, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 110, 120, 90));

        SolitudePic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Game/resources/solitude.jpg"))); // NOI18N
        getContentPane().add(SolitudePic, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 250, 120, 90));

        PowerPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Game/resources/power.jpg"))); // NOI18N
        getContentPane().add(PowerPic, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 400, 120, 90));

        BackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Game/resources/background.jpg"))); // NOI18N
        getContentPane().add(BackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 860, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*
 * This method is used when we move the "Wealth Slider"
 */
    private void wSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_wSliderStateChanged

        wSpinner.setValue(wSlider.getValue());        
    }//GEN-LAST:event_wSliderStateChanged
/*
 * This method is used when we move the "Solitude Slider"
 */
    private void lSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lSliderStateChanged

        lSpinner.setValue(lSlider.getValue());    
    }//GEN-LAST:event_lSliderStateChanged
/*
 * This method is used when we move the "Power Slider"
 */
    private void pSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pSliderStateChanged
       
        pSpinner.setValue(pSlider.getValue());
    }//GEN-LAST:event_pSliderStateChanged
/*
 * This method is used when we increment and decrement the "wealth Spinner"
 */
    private void wSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_wSpinnerStateChanged
       
        SpinnerStateChanged(wSpinner, wSlider, wValue);
        
    }//GEN-LAST:event_wSpinnerStateChanged
/*
 * This method is used when we increment and decrement the "Solitude Spinner"
 */
    private void lSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lSpinnerStateChanged
        
        SpinnerStateChanged(lSpinner, lSlider, lValue);
    }//GEN-LAST:event_lSpinnerStateChanged
/*
 * This method is used when we increment and decrement the "Power Spinner"
 */
    private void pSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pSpinnerStateChanged
        
        SpinnerStateChanged(pSpinner, pSlider, pValue);
    }//GEN-LAST:event_pSpinnerStateChanged
    /**
     * This method is called whenever a spinner or slider is changed
     * @param spin
     * @param slide
     * @param prevalue 
     */
    private void SpinnerStateChanged(JSpinner spin, JSlider slide, int prevalue)
    {
            int value = (Integer) spin.getValue();// Gets current value
            int change = value - prevalue; //Gives us the change from previous value to current value
            int total = Integer.parseInt(Total.getText()); // gets current total
            if(change < 0)//change was negitive
            {
                // Here we give back to total , moving slider down
                total = total + Math.abs(change); // gives back to total!
                Total.setText(String.valueOf(total)); // Set total field to actual total
                slide.setValue(value);// Set slider to value 
                assignValue(spin.getName(),value);
            }    
            else // change was positive
            {
                // Here we attempt to take away from total, and attempt to move slider up
                total = total - change;
                if(total < 0)//can't take anymore
                {
                    //Lock it !!
                    spin.setValue(prevalue);
                    slide.setValue(prevalue);
                }
                else // we can take away
                {

                    slide.setValue(value); // Set slider to value
                    Total.setText(String.valueOf(total));//Set total field to actual total
                    assignValue(spin.getName(),value);
                   
                }   

            } 

    } 
    /**
     * This is a simple method that just assigns a value depending on the 
     * spinner's name
     * @param aName
     * @param aValue 
     */
    private void assignValue(String aName, int aValue)
    {
        switch (aName)
        {
            case "Power":
                pValue = aValue;
                break;
            case "Solitude":
                lValue = aValue;
                break;
            default:
                wValue = aValue;
                break;
        }    
    }
    
 /*
 * This method is used when we click the Create button on the UI
 */    
    private void CreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateActionPerformed
        // need to take values that are in the associated and send them off
        pValue = pSlider.getValue(); // Gets the points for power
        wValue = wSlider.getValue(); // Gets the points for wealth
        lValue = lSlider.getValue(); // Gets the points for Solitude
        if(pValue + wValue + lValue !=100) // in case not all points given
        {
           JOptionPane.showMessageDialog(this, "You need to use all your points", "Error", 0);
        }
        else
        {
           int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Is this Correct??", "Validate" , 2 , JOptionPane.QUESTION_MESSAGE); 
            if(showConfirmDialog == 0)
            {
                // Going to add to pInfo
                info = info +","+ wValue +"," + lValue + "," + pValue;
                BufferedWriter writer;
                try
                {
                    writer = new BufferedWriter( new FileWriter("players.txt",true));
                    writer.write(info);
                    writer.append("\n");
                    writer.close();
                    this.dispose();
                } 
                catch(IOException ioe)
                {
                    JOptionPane.showMessageDialog(this, "Can't Write File", "Error", 0);
                }
            }           
        }        
    }//GEN-LAST:event_CreateActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HappinessCriteria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HappinessCriteria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HappinessCriteria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HappinessCriteria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HappinessCriteria().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BackGround;
    private javax.swing.JButton Create;
    private javax.swing.JLabel PowerPic;
    private javax.swing.JLabel SolitudePic;
    private javax.swing.JLabel Title;
    private javax.swing.JTextField Total;
    private javax.swing.JLabel WealthPic;
    private javax.swing.JSlider lSlider;
    private javax.swing.JSpinner lSpinner;
    private javax.swing.JSlider pSlider;
    private javax.swing.JSpinner pSpinner;
    private javax.swing.JSlider wSlider;
    private javax.swing.JSpinner wSpinner;
    // End of variables declaration//GEN-END:variables
    private int wValue,pValue,lValue =0;
    private String info;
    

}
